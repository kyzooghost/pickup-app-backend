service: pickup-app-backend
frameworkVersion: '3'	
useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-dynamodb-autoscaling

custom:
  capacities:
    - table: StudentsTable
      read:
        minimum: 5
        maximum: 1000
        usage: 0.75
      write:
        minimum: 5
        maximum: 200
        usage: 0.75
    - table: VehicleTable
      read:
        minimum: 5
        maximum: 1000
        usage: 0.75
      write:
        minimum: 5
        maximum: 200
        usage: 0.75

provider:
  name: aws
  region: ap-southeast-2
  stage: dev
  stackName: pickup-app-backend
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:UpdateTable
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt:
          - StudentsTable
          - Arn
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:UpdateTable
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt:
          - VehicleTable
          - Arn

functions:
  resetStudentTable:
    handler: src/handlers.resetStudentTableHandler
    events:
      - http:
          path: reset
          method: get
          cors: true
  setStudentData:
    handler: src/handlers.setStudentDataHandler
    events:
      - http:
          path: student
          method: post
          cors: true
  getStudentList:
    handler: src/handlers.getStudentListHandler
    events:
      - http:
          path: student/all
          method: get
          cors: true
  setVehicleData:
    handler: src/handlers.setVehicleDataHandler
    events:
      - http:
          path: vehicle
          method: post
          cors: true
  getVehicleList:
    handler: src/handlers.getVehicleListHandler
    events:
      - http:
          path: vehicle/all
          method: get
          cors: true
  deleteVehicle:
    handler: src/handlers.deleteVehicleHandler
    events:
      - http:
          path: vehicle
          method: delete
          cors: true

resources:
  Resources:
    StudentsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${env:STUDENT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: student_id
            AttributeType: N
          - AttributeName: class_id
            AttributeType: N
        KeySchema:
          - AttributeName: student_id
            KeyType: HASH
          - AttributeName: class_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    VehicleTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${env:VEHICLE_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: registration
            AttributeType: S
        KeySchema:
          - AttributeName: registration
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
